# == Schema Information
#
# Table name: users
#
#  id         :integer          not null, primary key
#  name       :string(255)
#  email      :string(255)
#  created_at :datetime         not null
#  updated_at :datetime         not null
#

require 'spec_helper'

describe User do

 before(:each) do
  @attr = {:name => "Example User", :email => "user@example.com"}
 end

 it "should require a name" do
  no_name_user = User.new(@attr.merge(:name => ""))
  no_name_user.should_not be_valid
 end

 it "should require a email" do
  no_name_user = User.new(@attr.merge(:email => ""))
  no_name_user.should_not be_valid
 end

 it "should have a name smaller than 50" do
  name = 'a' * 51
  no_name_user = User.new(@attr.merge(:name => name))
  no_name_user.should_not be_valid
 end

 it  "should accept valid email addresses" do
  addresses = %w[user@foo.com THE_USER@foo.bar.org first.last@foo.jp]
  addresses.each do |address|
   valid_email_usr = User.new( @attr.merge(:email => address))
   valid_email_usr.should be_valid
  end
 end

 it  "should not accept invalid email addresses" do
  addresses = %w[user@foo,com user_at_foo.org example@user.foo.]
  addresses.each do |address|
   invalid_email_usr = User.new( @attr.merge(:email => address))
   invalid_email_usr.should_not be_valid
  end
 end

 it "should reject duplicate email addresse" do
  #put a user with given email address into the database
  User.create!(@attr)
  user_with_duplicate_email = User.new(@attr)
  user_with_duplicate_email.should_not be_valid
 end

end
